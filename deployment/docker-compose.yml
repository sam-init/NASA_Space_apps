version: '3.8'

services:
  # ExoPlanet AI Web Application
  exoplanet-ai:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///exoplanet.db}
    volumes:
      - ../backend/data:/app/data
      - logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - exoplanet-network

  # Redis for caching and background tasks (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - exoplanet-network

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=exoplanet_ai
      - POSTGRES_USER=${POSTGRES_USER:-exoplanet}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - exoplanet-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - exoplanet-ai
    restart: unless-stopped
    networks:
      - exoplanet-network

volumes:
  postgres-data:
  redis-data:
  logs:

networks:
  exoplanet-network:
    driver: bridge
